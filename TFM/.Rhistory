class_balance(df, "compania_cedente")
class_balance(df, "centro_suscripcion")
##### hist of rows by year of fecha_efecto
ggplot(df, aes(x = fecha_efecto)) + geom_histogram(binwidth = 365)
# Histograma de la variable objetivo para ver su distribución
ggplot(data, aes(x = tasa_prima)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Distribución de TASA DE PRIMA", x = "TASA DE PRIMA", y = "Frecuencia")
ggplot(data, aes(x = tasa_prima)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black")
ggplot(data, aes(x = tasa_prima))
######################################################
################## Load data #########################
######################################################
# load data
df <- read_excel("bbdd.xls", sheet = "Negocio Proporcional")
# check data
head(df)
# check number of rows and columns
dim(df)
######################################################
################## Transformations ###################
######################################################
# change column names
new_names <- c(
"centro_suscripcion", "filial", "gestion", "unidad_suscr", "unidad_gestion",
"codigo_facultativo", "estado", "gestion_2", "suscr", "ejercicio",
"fecha_efecto", "fecha_apertura_chantier", "fecha_inicio_cobertura",
"fecha_vencimiento", "asegurado", "riesgo", "producto", "top", "sector",
"tipo_riesgo", "compania_cedente", "pais_cedente", "grupo_intermediario",
"intermediario", "division", "tipo_contrato", "num_linea", "sumas_aseguradas",
"portee", "prioridad_franquicia", "tasa_prima", "aliment_global",
"parte_aceptada", "parte_scor", "aliment_scor", "sumas_aseguradas_scor",
"monto_limite_scor", "ecg", "divisa_ecg", "mercado", "pais_analisis", "trigger"
)
colnames(df) <- new_names
# change the data type
df$fecha_efecto <- as.Date(df$fecha_efecto, format = "%Y-%m-%d")
df$fecha_apertura_chantier <- as.Date(df$fecha_apertura_chantier, format = "%Y-%m-%d")
df$fecha_inicio_cobertura <- as.Date(df$fecha_inicio_cobertura, format = "%Y-%m-%d")
df$fecha_vencimiento <- as.Date(df$fecha_vencimiento, format = "%Y-%m-%d")
# see the data type of data
str(df)
# Get class balance
class_balance <- function(df, columna) {
df %>%
count(!!sym(columna)) %>%
ggplot(aes(x = reorder(!!sym(columna), -n), y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = paste("Distribución de", columna),
x = columna,
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
# Class balance by column
class_balance(df, "tipo_riesgo")
class_balance(df, "compania_cedente")
class_balance(df, "centro_suscripcion")
######################################################
################## Outliers ##########################
######################################################
# Outliers in tasa_prima
df %>%
ggplot(aes(x = tasa_prima)) +
geom_boxplot() +
theme_minimal()
# Get outliers with IQR
q1 = quantile(df$tasa_prima, 0.25)
q3 = quantile(df$tasa_prima, 0.75)
iqr = q3 - q1
lower_bound = q1 - 3 * iqr
upper_bound = q3 + 3 * iqr
# Drop outliers in df
df_no_outliers <- df %>%
filter(tasa_prima > lower_bound & tasa_prima < upper_bound)
dim(df_no_outliers)
# df without outliers
df_no_outliers %>%
ggplot(aes(x = tasa_prima)) +
geom_boxplot() +
theme_minimal()
# summarise data
df_no_outliers %>%
summarise(
mean_tasa_prima = mean(tasa_prima),
sd_tasa_prima = sd(tasa_prima),
min_tasa_prima = min(tasa_prima),
q1_tasa_prima = quantile(tasa_prima, 0.25),
median_tasa_prima = median(tasa_prima),
q3_tasa_prima = quantile(tasa_prima, 0.75),
max_tasa_prima = max(tasa_prima)
)
ggplot(data, aes(x = tasa_prima)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Distribución de TASA DE PRIMA", x = "TASA DE PRIMA", y = "Frecuencia")
# Histograma de la variable objetivo para ver su distribución
ggplot(df, aes(x = tasa_prima)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Distribución de TASA DE PRIMA", x = "TASA DE PRIMA", y = "Frecuencia")
# Outliers in tasa_prima
df %>%
ggplot(aes(x = tasa_prima)) +
geom_boxplot() +
theme_minimal()
# Get outliers with IQR
q1 = quantile(df$tasa_prima, 0.25)
q3 = quantile(df$tasa_prima, 0.75)
iqr = q3 - q1
lower_bound = q1 - 3 * iqr
upper_bound = q3 + 3 * iqr
upper_bound
lower_bound
df_no_outliers %>%
summarise(
mean_tasa_prima = mean(tasa_prima),
sd_tasa_prima = sd(tasa_prima),
min_tasa_prima = min(tasa_prima),
q1_tasa_prima = quantile(tasa_prima, 0.25),
median_tasa_prima = median(tasa_prima),
q3_tasa_prima = quantile(tasa_prima, 0.75),
max_tasa_prima = max(tasa_prima)
)
lower_bound
upper_bound
# df without outliers
df <- df_no_outliers
# Histograma de la variable objetivo para ver su distribución
ggplot(df, aes(x = tasa_prima)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Distribución de TASA DE PRIMA", x = "TASA DE PRIMA", y = "Frecuencia")
##### hist of rows by year of fecha_efecto
ggplot(df, aes(x = fecha_efecto)) + geom_histogram(binwidth = 365)
##### tasa_prima con variables continuas #####
# Graph sumas_aseguradas and tasa_prima
ggplot(df, aes(x = sumas_aseguradas, y = tasa_prima)) + geom_point()
# Graph sumas_aseguradas and tasa_prima
ggplot(df, aes(x = sumas_aseguradas_scor, y = tasa_prima)) + geom_point()
# Graph sumas_aseguradas and tasa_prima
ggplot(df, aes(x = sumas_aseguradas_scor, y = sumas_aseguradas)) + geom_point()
##### tasa_prima con variables de tiempo #####
# Graph fecha_efecto and tasa_prima
ggplot(df, aes(x = fecha_efecto, y = tasa_prima)) + geom_point() + geom_smooth()
##### tasa_prima con variables de tiempo #####
# Graph fecha_efecto and tasa_prima
ggplot(df, aes(x = fecha_efecto, y = tasa_prima)) + geom_point()
# Graph fecha_efecto and tasa_prima, with tipo_riesgo as color
ggplot(df, aes(x = fecha_efecto, y = tasa_prima, color = tipo_riesgo)) + geom_point()
# Graph sumas_aseguradas and tasa_prima
ggplot(df, aes(x = sumas_aseguradas_scor, y = sumas_aseguradas)) + geom_point()
# Graph sumas_aseguradas and tasa_prima
ggplot(df, aes(x = sumas_aseguradas_scor, y = sumas_aseguradas)) + geom_point() + geom_smooth(method = "lm")
# Histograma de la variable objetivo para ver su distribución
ggplot(df, aes(x = tasa_prima)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Distribución", x = "Tasa de prima", y = "Frecuencia")
##### hist of rows by year of fecha_efecto
ggplot(df, aes(x = fecha_efecto)) + geom_histogram(binwidth = 365)
######################################################
######### Working directory and libraries ############
######################################################
# set working directory
setwd("/Users/jjmilla/Repositorios/master-umh-stat/master-umh-stat/TFM")
# check path or working directory
getwd()
# load libraries
library(readxl)
library(ggplot2)
library(dplyr)
library(magrittr)
######################################################
################## Load data #########################
######################################################
# load data
df <- read_excel("bbdd.xls", sheet = "Negocio Proporcional")
# check data
head(df)
# check number of rows and columns
dim(df)
######################################################
################## Transformations ###################
######################################################
# change column names
new_names <- c(
"centro_suscripcion", "filial", "gestion", "unidad_suscr", "unidad_gestion",
"codigo_facultativo", "estado", "gestion_2", "suscr", "ejercicio",
"fecha_efecto", "fecha_apertura_chantier", "fecha_inicio_cobertura",
"fecha_vencimiento", "asegurado", "riesgo", "producto", "top", "sector",
"tipo_riesgo", "compania_cedente", "pais_cedente", "grupo_intermediario",
"intermediario", "division", "tipo_contrato", "num_linea", "sumas_aseguradas",
"portee", "prioridad_franquicia", "tasa_prima", "aliment_global",
"parte_aceptada", "parte_scor", "aliment_scor", "sumas_aseguradas_scor",
"monto_limite_scor", "ecg", "divisa_ecg", "mercado", "pais_analisis", "trigger"
)
colnames(df) <- new_names
# change the data type
df$fecha_efecto <- as.Date(df$fecha_efecto, format = "%Y-%m-%d")
df$fecha_apertura_chantier <- as.Date(df$fecha_apertura_chantier, format = "%Y-%m-%d")
df$fecha_inicio_cobertura <- as.Date(df$fecha_inicio_cobertura, format = "%Y-%m-%d")
df$fecha_vencimiento <- as.Date(df$fecha_vencimiento, format = "%Y-%m-%d")
# Crear una nueva variable que extraiga el trimestre
df$fecha_efecto_trimestre <- quarter(data$FECHA_DE_EFECTO)
library(lubridate)
######################################################
######### Working directory and libraries ############
######################################################
# set working directory
setwd("/Users/jjmilla/Repositorios/master-umh-stat/master-umh-stat/TFM")
# check path or working directory
getwd()
# load libraries
library(readxl)
library(ggplot2)
library(dplyr)
library(magrittr)
library(lubridate)
######################################################
################## Load data #########################
######################################################
# load data
df <- read_excel("bbdd.xls", sheet = "Negocio Proporcional")
# check data
head(df)
# check number of rows and columns
dim(df)
######################################################
################## Transformations ###################
######################################################
# change column names
new_names <- c(
"centro_suscripcion", "filial", "gestion", "unidad_suscr", "unidad_gestion",
"codigo_facultativo", "estado", "gestion_2", "suscr", "ejercicio",
"fecha_efecto", "fecha_apertura_chantier", "fecha_inicio_cobertura",
"fecha_vencimiento", "asegurado", "riesgo", "producto", "top", "sector",
"tipo_riesgo", "compania_cedente", "pais_cedente", "grupo_intermediario",
"intermediario", "division", "tipo_contrato", "num_linea", "sumas_aseguradas",
"portee", "prioridad_franquicia", "tasa_prima", "aliment_global",
"parte_aceptada", "parte_scor", "aliment_scor", "sumas_aseguradas_scor",
"monto_limite_scor", "ecg", "divisa_ecg", "mercado", "pais_analisis", "trigger"
)
colnames(df) <- new_names
# change the data type
df$fecha_efecto <- as.Date(df$fecha_efecto, format = "%Y-%m-%d")
df$fecha_apertura_chantier <- as.Date(df$fecha_apertura_chantier, format = "%Y-%m-%d")
df$fecha_inicio_cobertura <- as.Date(df$fecha_inicio_cobertura, format = "%Y-%m-%d")
df$fecha_vencimiento <- as.Date(df$fecha_vencimiento, format = "%Y-%m-%d")
# Crear una nueva variable que extraiga el trimestre
df$fecha_efecto_trimestre <- quarter(data$FECHA_DE_EFECTO)
######################################################
######### Working directory and libraries ############
######################################################
# set working directory
setwd("/Users/jjmilla/Repositorios/master-umh-stat/master-umh-stat/TFM")
# check path or working directory
getwd()
# load libraries
library(readxl)
library(ggplot2)
library(dplyr)
library(magrittr)
library(lubridate)
######################################################
################## Load data #########################
######################################################
# load data
df <- read_excel("bbdd.xls", sheet = "Negocio Proporcional")
# check data
head(df)
# check number of rows and columns
dim(df)
######################################################
################## Transformations ###################
######################################################
# change column names
new_names <- c(
"centro_suscripcion", "filial", "gestion", "unidad_suscr", "unidad_gestion",
"codigo_facultativo", "estado", "gestion_2", "suscr", "ejercicio",
"fecha_efecto", "fecha_apertura_chantier", "fecha_inicio_cobertura",
"fecha_vencimiento", "asegurado", "riesgo", "producto", "top", "sector",
"tipo_riesgo", "compania_cedente", "pais_cedente", "grupo_intermediario",
"intermediario", "division", "tipo_contrato", "num_linea", "sumas_aseguradas",
"portee", "prioridad_franquicia", "tasa_prima", "aliment_global",
"parte_aceptada", "parte_scor", "aliment_scor", "sumas_aseguradas_scor",
"monto_limite_scor", "ecg", "divisa_ecg", "mercado", "pais_analisis", "trigger"
)
colnames(df) <- new_names
# change the data type
df$fecha_efecto <- as.Date(df$fecha_efecto, format = "%Y-%m-%d")
df$fecha_apertura_chantier <- as.Date(df$fecha_apertura_chantier, format = "%Y-%m-%d")
df$fecha_inicio_cobertura <- as.Date(df$fecha_inicio_cobertura, format = "%Y-%m-%d")
df$fecha_vencimiento <- as.Date(df$fecha_vencimiento, format = "%Y-%m-%d")
# Crear una nueva variable que extraiga el trimestre
df$fecha_efecto_trimestre <- quarter(df$fecha_efecto)
# see the data type of data
str(df)
# Get class balance
class_balance <- function(df, columna) {
df %>%
count(!!sym(columna)) %>%
ggplot(aes(x = reorder(!!sym(columna), -n), y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = paste("Distribución de", columna),
x = columna,
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
# Class balance by column
class_balance(df, "tipo_riesgo")
class_balance(df, "compania_cedente")
class_balance(df, "centro_suscripcion")
# Outliers in tasa_prima
df %>%
ggplot(aes(x = tasa_prima)) +
geom_boxplot() +
theme_minimal()
# Get outliers with IQR
q1 = quantile(df$tasa_prima, 0.25)
q3 = quantile(df$tasa_prima, 0.75)
iqr = q3 - q1
lower_bound = q1 - 3 * iqr
upper_bound = q3 + 3 * iqr
# Drop outliers in df
df_no_outliers <- df %>%
filter(tasa_prima > lower_bound & tasa_prima < upper_bound)
dim(df_no_outliers)
# df without outliers
df_no_outliers %>%
ggplot(aes(x = tasa_prima)) +
geom_boxplot() +
theme_minimal()
# summarise data
df_no_outliers %>%
summarise(
mean_tasa_prima = mean(tasa_prima),
sd_tasa_prima = sd(tasa_prima),
min_tasa_prima = min(tasa_prima),
q1_tasa_prima = quantile(tasa_prima, 0.25),
median_tasa_prima = median(tasa_prima),
q3_tasa_prima = quantile(tasa_prima, 0.75),
max_tasa_prima = max(tasa_prima)
)
# df without outliers
df <- df_no_outliers
######################################################
################## Graphs ############################
######################################################
# Histograma de la variable objetivo para ver su distribución
ggplot(df, aes(x = tasa_prima)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Distribución", x = "Tasa de prima", y = "Frecuencia")
ggplot(df, aes(x = fecha_efecto_trimestre, y = tasa_prima)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fecha_efecto_trimestre
df$fecha_efecto_trimestre
# Convertir "TASA DE PRIMA" a numérica en caso de que no lo sea
data$TASA_DE_PRIMA <- as.numeric(as.character(data$TASA_DE_PRIMA))
##### tasa_prima con variables categoricas #####
# Graph tasa_prima in a boxplot by fecha_efecto_trimestre
ggplot(df, aes(x = factor(fecha_efecto_trimestre), y = tasa_prima)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df$fecha_efecto_trimestre <- quarter(df$fecha_efecto)
df$fecha_efecto_mes <- month(df$fecha_efecto)
ggplot(df, aes(x = factor(fecha_efecto_mes), y = tasa_prima)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Graph tasa_prima in a boxplot by tipo_riesgo
ggplot(df, aes(x = tipo_riesgo, y = tasa_prima)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = tipo_riesgo, y = tasa_prima)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = compania_cedente, y = tasa_prima)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Graph fecha_efecto and tasa_prima, with compania_cedente as color
ggplot(df, aes(x = fecha_efecto, y = tasa_prima, color = compania_cedente)) + geom_point()
# Crear la nueva variable "CompaniaAgrupada" eliminando etiquetas finales como " A", " B", etc.
data <- df %>%
mutate(CompaniaAgrupada = str_replace(compania_cedente, " [A-Z]$", ""))
df %>%
mutate(CompaniaAgrupada = str_replace(compania_cedente, " [A-Z]$", ""))
# check path or working directory
getwd()
# load libraries
library(readxl)
library(ggplot2)
library(dplyr)
library(magrittr)
library(lubridate)
library(stringr)
df %>%
mutate(CompaniaAgrupada = str_replace(compania_cedente, " [A-Z]$", ""))
data <- df %>%
mutate(CompaniaAgrupada = str_replace(compania_cedente, " [A-Z]$", ""))
df$CompaniaAgrupada
data$CompaniaAgrupada
# Graph fecha_efecto and tasa_prima, with compania_cedente as color
ggplot(data, aes(x = fecha_efecto, y = tasa_prima, color = compania_cedente)) +
geom_point()
# Graph fecha_efecto and tasa_prima, with compania_cedente as color
ggplot(data, aes(x = fecha_efecto, y = tasa_prima, color = CompaniaAgrupada)) +
geom_point()
data <- data %>%
mutate(CompaniaAgrupada = case_when(
# Agrupar todas las variantes que contengan "Mapfre"
str_detect(compania_cedente, regex("Mapfre", ignore_case = TRUE)) ~ "Mapfre",
# Agrupar todas las variantes que contengan "AXA"
str_detect(compania_cedente, regex("AXA", ignore_case = TRUE)) ~ "AXA",
# Agrupar variantes para "SCOR" (puedes agregar más condiciones similares)
str_detect(compania_cedente, regex("SCOR", ignore_case = TRUE)) ~ "SCOR",
# Agrupa para otras compañías, añadiendo las condiciones necesarias
# Por ejemplo, para "Allianz":
str_detect(compania_cedente, regex("Allianz", ignore_case = TRUE)) ~ "Allianz",
# Si no se cumple ninguna condición, se mantiene el valor original
TRUE ~ compania_cedente
))
ggplot(df, aes(x = fecha_efecto, y = tasa_prima, color = compania_cedente)) +
geom_point()
# Crear la nueva variable "CompaniaAgrupada" eliminando etiquetas finales como " A", " B", etc.
data <- data %>%
mutate(CompaniaAgrupada = case_when(
# Agrupar todas las variantes que contengan "Mapfre"
str_detect(compania_cedente, regex("Mapfre", ignore_case = TRUE)) ~ "Mapfre",
# Agrupar todas las variantes que contengan "AXA"
str_detect(compania_cedente, regex("AXA", ignore_case = TRUE)) ~ "AXA",
# Agrupar variantes para "SCOR" (puedes agregar más condiciones similares)
str_detect(compania_cedente, regex("SCOR", ignore_case = TRUE)) ~ "SCOR",
# Agrupa para otras compañías, añadiendo las condiciones necesarias
# Por ejemplo, para "Allianz":
str_detect(compania_cedente, regex("ALLIANZ", ignore_case = TRUE)) ~ "Allianz",
# Si no se cumple ninguna condición, se mantiene el valor original
TRUE ~ compania_cedente
))
data <- data %>%
mutate(CompaniaAgrupada = case_when(
# Agrupar todas las variantes que contengan "Mapfre"
str_detect(compania_cedente, regex("Mapfre", ignore_case = TRUE)) ~ "Mapfre",
# Agrupar todas las variantes que contengan "AXA"
str_detect(compania_cedente, regex("AXA", ignore_case = TRUE)) ~ "AXA",
# Agrupar variantes para "SCOR" (puedes agregar más condiciones similares)
str_detect(compania_cedente, regex("SCOR", ignore_case = TRUE)) ~ "SCOR",
# Agrupa para otras compañías, añadiendo las condiciones necesarias
# Por ejemplo, para "Allianz":
str_detect(compania_cedente, regex("ALLIANZ", ignore_case = TRUE)) ~ "Allianz",
# Si no se cumple ninguna condición, se mantiene el valor original
TRUE ~ compania_cedente
))
ggplot(data, aes(x = fecha_efecto, y = tasa_prima, color = CompaniaAgrupada)) +
geom_point()
data <- data %>%
mutate(CompaniaAgrupada = case_when(
# Agrupar todas las variantes que contengan "Mapfre"
str_detect(compania_cedente, regex("MAPFRE", ignore_case = TRUE)) ~ "MAPFRE",
# Agrupar todas las variantes que contengan "AXA"
str_detect(compania_cedente, regex("AXA", ignore_case = TRUE)) ~ "AXA",
# Agrupar variantes para "SCOR" (puedes agregar más condiciones similares)
str_detect(compania_cedente, regex("SCOR", ignore_case = TRUE)) ~ "SCOR",
# Agrupa para otras compañías, añadiendo las condiciones necesarias
# Por ejemplo, para "Allianz":
str_detect(compania_cedente, regex("ALLIANZ", ignore_case = TRUE)) ~ "ALLIANZ",
# Si no se cumple ninguna condición, se mantiene el valor original
TRUE ~ compania_cedente
))
ggplot(data, aes(x = fecha_efecto, y = tasa_prima, color = CompaniaAgrupada)) +
geom_point()
# Crear la nueva variable "CompaniaAgrupada" eliminando etiquetas finales como " A", " B", etc.
data <- data %>%
mutate(CompaniaAgrupada = case_when(
# Agrupar todas las variantes que contengan "Mapfre"
str_detect(compania_cedente, regex("MAPFRE", ignore_case = TRUE)) ~ "MAPFRE",
# Agrupar todas las variantes que contengan "AXA"
str_detect(compania_cedente, regex("AXA", ignore_case = TRUE)) ~ "AXA",
# Agrupar variantes para "SCOR" (puedes agregar más condiciones similares)
str_detect(compania_cedente, regex("SCOR", ignore_case = TRUE)) ~ "SCOR",
# Agrupa para otras compañías, añadiendo las condiciones necesarias
# Por ejemplo, para "Allianz":
str_detect(compania_cedente, regex("ALLIANZ", ignore_case = TRUE)) ~ "ALLIANZ",
str_detect(compania_cedente, regex("REALE", ignore_case = TRUE)) ~ "REALE",
# Si no se cumple ninguna condición, se mantiene el valor original
TRUE ~ compania_cedente
))
ggplot(data, aes(x = fecha_efecto, y = tasa_prima, color = CompaniaAgrupada)) +
geom_point()
# Crear la nueva variable "CompaniaAgrupada" eliminando etiquetas finales como " A", " B", etc.
data <- data %>%
mutate(CompaniaAgrupada = case_when(
str_detect(compania_cedente, regex("MAPFRE", ignore_case = TRUE)) ~ "MAPFRE",
str_detect(compania_cedente, regex("AXA", ignore_case = TRUE)) ~ "AXA",
str_detect(compania_cedente, regex("SCOR", ignore_case = TRUE)) ~ "SCOR",
str_detect(compania_cedente, regex("ALLIANZ", ignore_case = TRUE)) ~ "ALLIANZ",
str_detect(compania_cedente, regex("REALE", ignore_case = TRUE)) ~ "REALE",
str_detect(compania_cedente, regex("UAP", ignore_case = TRUE)) ~ "UAP",
str_detect(compania_cedente, regex("ZURICH", ignore_case = TRUE)) ~ "ZURICH",
# Si no se cumple ninguna condición, se mantiene el valor original
TRUE ~ compania_cedente
))
ggplot(data, aes(x = fecha_efecto, y = tasa_prima, color = CompaniaAgrupada)) +
geom_point()
# Crear la nueva variable "CompaniaAgrupada" eliminando etiquetas finales como " A", " B", etc.
data <- data %>%
mutate(CompaniaAgrupada = case_when(
str_detect(compania_cedente, regex("MAPFRE", ignore_case = TRUE)) ~ "MAPFRE",
str_detect(compania_cedente, regex("AXA", ignore_case = TRUE)) ~ "AXA",
str_detect(compania_cedente, regex("SCOR", ignore_case = TRUE)) ~ "SCOR",
str_detect(compania_cedente, regex("ALLIANZ", ignore_case = TRUE)) ~ "ALLIANZ",
str_detect(compania_cedente, regex("REALE", ignore_case = TRUE)) ~ "REALE",
str_detect(compania_cedente, regex("UAP", ignore_case = TRUE)) ~ "UAP",
str_detect(compania_cedente, regex("ZURICH", ignore_case = TRUE)) ~ "ZURICH",
str_detect(compania_cedente, regex("AGF", ignore_case = TRUE)) ~ "AGF",
# Si no se cumple ninguna condición, se mantiene el valor original
TRUE ~ compania_cedente
))
ggplot(data, aes(x = fecha_efecto, y = tasa_prima, color = CompaniaAgrupada)) +
geom_point()
