names(low_loadings[low_loadings])
# Realizar el análisis factorial exploratorio
fa_result <- fa(data[, 1:25], nfactors = 5, rotate = "varimax")
# Visualizar los resultados
print(fa_result, digits = 3, cutoff = 0.3)
# Si alguna comunalidad es muy baja (< 0.40), esa variable no está bien explicada por los factores.
fa_result$communality
# Graficar la matriz de cargas factoriales
fa.diagram(fa_result)
# Cargas bajas
low_loadings <- apply(abs(fa_result$loadings), 1, max) < 0.30
names(low_loadings[low_loadings])
fa_result$loadings
fa.diagram(fa_result)
low_loadings <- apply(abs(fa_result$loadings), 1, max) < 0.50
names(low_loadings[low_loadings])
low_loadings <- apply(abs(fa_result$loadings), 1, max) < 0.30
names(low_loadings[low_loadings])
fa_result$communality
fa_result$communality
low_communality <- apply(abs(fa_result$communality), 1, max) < 0.40
apply(abs(fa_result$communality), 1, max)
apply(abs(fa_result$communality), 1, max)
abs(fa_result$communality)
max
apply(abs(fa_result$communality), 1, max) < 0.40
# Si alguna comunalidad es muy baja (< 0.40), esa variable no está bien explicada por los factores.
# Variables con comunalidades bajas (< 0.40):
# Estas variables pueden eliminarse del modelo o
# evaluarse si se agrupan con otras variables.
fa_result$communality
# Graficar la matriz de cargas factoriales
fa.diagram(fa_result)
# Cargas bajas
# Variables con cargas bajas (< 0.30):
# Estas variables no contribuyen significativamente a ningún factor
# y podrían eliminarse.
# En este caso no hay ninguna.
low_loadings <- apply(abs(fa_result$loadings), 1, max) < 0.30
fa.diagram(fa_result)
fa_result$Vaccounted
fa_result$Vaccounted
##### APARTADO 5
# Ajustar un modelo factorial
fa_model <- fa(data[, 1:25], nfactors = 5, rotate = "varimax", fm = "ml")
# Calcular puntuaciones factoriales usando el modelo
factor_scores <- factor.scores(data[, 1:25], fa_model, method = "regression")
# Ver las primeras filas de las puntuaciones
head(factor_scores$scores)
factor_scores$scores
str(data)
len(factor_scores$scores)
length(factor_scores$scores)
head(factor_scores$scores)
length(factor_scores$scores)/5
size(data)
dim(data)
dim(data)[1] # Sujetos totales en df original
# Crear un gráfico de dispersión de los factores 1 y 2
plot(
factor_scores$scores[, 1],  # Puntuaciones del Factor 1
factor_scores$scores[, 2],  # Puntuaciones del Factor 2
xlab = "Factor 1",
ylab = "Factor 2",
main = "Representación de los encuestados en los ejes factoriales",
pch = 19, col = "blue"
)
# Agregar una cuadrícula
grid()
# Representar los factores coloreados por género
plot(
factor_scores$scores[, 1],  # Factor 1
factor_scores$scores[, 2],  # Factor 2
xlab = "Factor 1",
ylab = "Factor 2",
main = "Representación por género",
pch = as.numeric(data$gender),  # Diferentes símbolos por género
col = as.numeric(data$gender)  # Diferentes colores por género
)
# Agregar leyenda
legend("topright", legend = c("Hombres", "Mujeres"), col = c(1, 2), pch = c(1, 2))
# Cambiar los factores a graficar
plot(
factor_scores$scores[, 3],  # Factor 3
factor_scores$scores[, 4],  # Factor 4
xlab = "Factor 3",
ylab = "Factor 4",
main = "Representación de los factores 3 y 4",
pch = 19, col = "green"
)
# Verificar las categorías de la variable gender
table(data$gender)
# Si gender es categórica pero no numérica, conviértela en factor
data$gender <- as.factor(data$gender)
# Graficar Factor 1 vs. Factor 2 coloreando por género
plot(
factor_scores$scores[, 1],  # Puntuaciones del Factor 1
factor_scores$scores[, 2],  # Puntuaciones del Factor 2
col = as.numeric(data$gender),  # Colores según el género
pch = 19,  # Forma de los puntos
xlab = "Factor 1",
ylab = "Factor 2",
main = "Gráfico de factores diferenciados por género"
)
# Agregar leyenda
legend(
"topright",
legend = levels(data$gender),  # Etiquetas de género
col = 1:length(levels(data$gender)),  # Colores según género
pch = 19  # Forma de los puntos
)
# Representar los factores coloreados por género
plot(
factor_scores$scores[, 1],  # Factor 1
factor_scores$scores[, 2],  # Factor 2
xlab = "Factor 1",
ylab = "Factor 2",
main = "Representación por género",
pch = as.numeric(data$gender),  # Diferentes símbolos por género
col = as.numeric(data$gender)  # Diferentes colores por género
)
# Representar los factores coloreados por género
plot(
factor_scores$scores[, 1],  # Factor 1
factor_scores$scores[, 2],  # Factor 2
xlab = "Factor 1",
ylab = "Factor 2",
main = "Representación por género",
pch = as.numeric(data$gender),  # Diferentes símbolos por género
col = as.numeric(data$gender)  # Diferentes colores por género
)
# Agregar leyenda
legend("topright", legend = c("Hombres", "Mujeres"), col = c(1, 2), pch = c(1, 2))
plot(
factor_scores$scores[, 1],  # Factor 1
factor_scores$scores[, 2],  # Factor 2
xlab = "Factor 1",
ylab = "Factor 2",
main = "Representación por género",
pch = as.numeric(data$gender),  # Diferentes símbolos por género
col = as.numeric(data$gender)  # Diferentes colores por género
)
legend("topright", legend = c("Hombres", "Mujeres"), col = c(1, 2), pch = c(1, 2))
# Graficar Factor 1 vs. Factor 2 coloreando por género
plot(
factor_scores$scores[, 1],  # Puntuaciones del Factor 1
factor_scores$scores[, 2],  # Puntuaciones del Factor 2
col = as.numeric(data$gender),  # Colores según el género
pch = 19,  # Forma de los puntos
xlab = "Factor 1",
ylab = "Factor 2",
main = "Gráfico de factores diferenciados por género"
)
legend(
"topright",
legend = levels(data$gender),  # Etiquetas de género
col = 1:length(levels(data$gender)),  # Colores según género
pch = 19  # Forma de los puntos
)
##### APARTADO 7
# Verificar las categorías de la variable education
table(data$education)
# Si education es categórica pero no numérica, conviértela en factor
data$education <- as.factor(data$education)
# Graficar Factor 1 vs. Factor 2 coloreando por género
plot(
factor_scores$scores[, 1],  # Puntuaciones del Factor 1
factor_scores$scores[, 2],  # Puntuaciones del Factor 2
col = as.numeric(data$education),  # Colores según el género
pch = 19,  # Forma de los puntos
xlab = "Factor 1",
ylab = "Factor 2",
main = "Gráfico de factores diferenciados por género"
)
legend(
"topright",
legend = levels(data$education),  # Etiquetas de género
col = 1:length(levels(data$education)),  # Colores según género
pch = 19  # Forma de los puntos
)
data$age_group <- cut(
data$age,
breaks = c(0, 30, 60, Inf),  # Intervalos: Menores de 30, 30-60, Mayores de 60
labels = c("Joven", "Adulto", "Mayor")  # Nombres de las categorías
)
# Verificar la distribución de las categorías
table(data$age_group)
# Graficar Factor 1 vs. Factor 2 coloreando por categoría de edad
plot(
factor_scores$scores[, 1],  # Puntuaciones del Factor 1
factor_scores$scores[, 2],  # Puntuaciones del Factor 2
col = as.numeric(data$age_group),  # Colores según la categoría de edad
pch = 19,  # Forma de los puntos
xlab = "Factor 1",
ylab = "Factor 2",
main = "Gráfico de factores diferenciados por edad"
)
# Agregar leyenda
legend(
"topright",
legend = levels(data$age_group),  # Etiquetas de las categorías de edad
col = 1:length(levels(data$age_group)),  # Colores según categoría
pch = 19  # Forma de los puntos
)
# Graficar Factor 3 vs. Factor 4 coloreando por categoría de edad
plot(
factor_scores$scores[, 3],  # Factor 3
factor_scores$scores[, 4],  # Factor 4
col = as.numeric(data$age_group),  # Colores según la categoría de edad
pch = 19,  # Forma de los puntos
xlab = "Factor 3",
ylab = "Factor 4",
main = "Gráfico de factores 3 y 4 diferenciados por edad"
)
# Agregar leyenda
legend(
"topright",
legend = levels(data$age_group),  # Etiquetas de las categorías de edad
col = 1:length(levels(data$age_group)),  # Colores según categoría
pch = 19  # Forma de los puntos
)
# Promedios de las puntuaciones factoriales por categoría de edad
aggregate(factor_scores$scores, by = list(AgeGroup = data$age_group), FUN = mean)
# Desviaciones estándar de las puntuaciones factoriales por categoría de edad
aggregate(factor_scores$scores, by = list(AgeGroup = data$age_group), FUN = sd)
# Promedios de los factores por género
aggregate(factor_scores$scores, by = list(Gender = data$gender), FUN = mean)
# Desviaciones estándar de los factores por género
aggregate(factor_scores$scores, by = list(Gender = data$gender), FUN = sd)
# Promedios de los factores por género
aggregate(factor_scores$scores, by = list(Gender = data$education), FUN = mean)
# Desviaciones estándar de los factores por género
aggregate(factor_scores$scores, by = list(Gender = data$education), FUN = sd)
library(psych)
library(corrplot)
estudiantes <- read.csv("estudiantes.csv", header = T, sep = ";")
library(psych)
library(corrplot)
path="/Users/jjmilla/Repositorios/master-umh-stat/master-umh-stat/Estadistica I/Parte 3 - Scripts docente/11_AnalisisFactorial/Ejemplos/EjemploSatisfaccion/satisfaccion.csv"
estudiantes <- read.csv(path, header = T, sep = ";")
KMO(R)
cortest.bartlett(R, n = 20)
str(estudiantes)
scree(R)
eigen(R);cumsum(eigen(R)$values)/sum(diag(R))
modelo1 <- fa(estudiantes, rotate = "none", nfactors = 2, fm="minres")
scree(R)
eigen(R);cumsum(eigen(R)$values)/sum(diag(R))
#4. Realiza el Análisis Factorial con el número de factores elegido en el apartado anterior, utiliza diferentes
# métodos de estimación.
#Comenzamos con 2 factores y con el método de mínimo cuadrados ordinarios (minimiza los residuos), empezamos sin rotar.
###
# Con la funcion fa() podemos utilizar los metodos siguientes.
#
# minres: minimo residuo, minimiza la matriz de residuos utilizando un procedimiento OLS (Mínimos cuadrados ordinarios)
# mle: maxima verosimilitud
# pa: metodo de ejes principales
# alpha: análisis factorial alfa como se describe en Kaiser y Coffey (1965)
# minchi: minimizará el chi cuadrado ponderado del tamaño de la muestra cuando se traten correlaciones por pares con diferente número de sujetos por par
# minrak: análisis factorial de rango mínimo
modelo1 <- fa(estudiantes, rotate = "none", nfactors = 2, fm="minres")
modelo1$e.values #Valores propios de la matriz de correlaciones
library(psych)
library(corrplot)
path="/Users/jjmilla/Repositorios/master-umh-stat/master-umh-stat/Estadistica I/Parte 3 - Scripts docente/11_AnalisisFactorial/Ejemplos/EjemploSatisfaccion/satisfaccion.csv"
estudiantes <- read.csv(path, header = T, sep = ";")
#1 .estructura de la base de datos y resumen descriptivo
str(estudiantes)
describe(estudiantes)
#Matriz de correlaciones
R <- cor(estudiantes);R
estudiantes
describe(estudiantes)
corrplot(R, method = "square")
KMO(R)
cortest.bartlett(R, n = 20)
dim(estudiantes)
cortest.bartlett(R, n = 50)
cortest.bartlett(R, n = 30)
cortest.bartlett(R, n = 20)
####
scree(R)
eigen(R);cumsum(eigen(R)$values)/sum(diag(R))
modelo1 <- fa(estudiantes, rotate = "none", nfactors = 2, fm="minres")
modelo1 <- fa(estudiantes, rotate = "none", nfactors = 2, fm="minres")
#estimamos de nuevo el modelo
modelo2 <- fa(estudiantes,nfactors = 2, fm="minres",rotate = "varimax")
sapply(estudiantes, class)
estudiantes[, sapply(estudiantes, is.numeric)]
estudiantes
estudiantes <- estudiantes %>%
mutate(across(where(is.character), as.numeric)) %>%
mutate(across(where(is.factor), as.numeric))
estudiantes <- estudiantes %>%
mutate(across(where(is.character), as.numeric)) %>%
mutate(across(where(is.factor), as.numeric))
estudiantes
estudiantes
estudiantes <- read.csv(path, header = T, sep = ";")
estudiantes <- estudiantes[, sapply(estudiantes, is.numeric)]
estudiantes <- read.csv(path, header = T, sep = ";")
estudiantes
estudiantes$S <- as.numeric(estudiantes$S)
estudiantes$C <- as.numeric(estudiantes$C)
estudiantes$P8 <- as.numeric(estudiantes$P8)
estudiantes$S <- ifelse(estudiantes$S == "h", 1,
ifelse(estudiantes$S == "m", 2, NA))
estudiantes$S <- ifelse(estudiantes$S == "h", 1,
ifelse(estudiantes$S == "m", 2, NA))
estudiantes$S <- ifelse(estudiantes$S == "h", 1,
ifelse(estudiantes$S == "m", 2, NA))
estudiantes$C <- ifelse(estudiantes$C == "SI", 1,
ifelse(estudiantes$C == "NO", 0, NA))
estudiantes$P8 <- ifelse(estudiantes$P8 == "SI", 1,
ifelse(estudiantes$P8 == "NO", 0, NA))
estudiantes$S <- ifelse(estudiantes$S == "h", 1,
ifelse(estudiantes$S == "m", 2, NA))
estudiantes$C <- ifelse(estudiantes$C == "SI", 1,
ifelse(estudiantes$C == "NO", 0, NA))
estudiantes$P8 <- ifelse(estudiantes$P8 == "SI", 1,
ifelse(estudiantes$P8 == "NO", 0, NA))
modelo1 <- fa(estudiantes, rotate = "none", nfactors = 2, fm="minres")
P8
modelo1
estudiantes
estudiantes
estudiantes <- read.csv(path, header = T, sep = ";")
estudiantes
# Si no queremos utilizar las variables de texto
estudiantes <- estudiantes[, sapply(estudiantes, is.numeric)]
# Modelos
modelo1 <- fa(estudiantes, rotate = "none", nfactors = 2, fm="minres")
modelo1$e.values #Valores propios de la matriz de correlaciones
modelo1$values #Valores propios de la solución de los factores comunes
modelo1$communality#comunalidades
modelo1
modelo1$uniquenesses#unicidades, el porcentaje que queda por explicar
modelo1$loadings
biplot.psych(fa(estudiantes,nfactors = 2,fm="minres",rotate = "none"),pch = c(21,18))
fa.diagram(modelo1)
#La matriz de correlaciones residuales después de aplicar el modelo factorial.
modelo1$residual
#más cómodo
residuals(modelo1) #cuanto más cerca de cero mejor es el AF
biplot.psych(fa(estudiantes,nfactors = 2,fm="minres",rotate = "varimax"),pch = c(21,18))
#estimamos de nuevo el modelo
modelo2 <- fa(estudiantes,nfactors = 2, fm="minres",rotate = "varimax")
modelo2$communalities#comunalidades
modelo2$uniquenesses#unicidades
modelo2$loadings
fa.diagram(modelo2)
modelo3 <- fa(estudiantes,nfactors = 2, fm="pa",rotate = "noe")#no llega a la solución, subimos el número de iteraciones
modelo3 <- fa(estudiantes,nfactors = 2, fm="pa",rotate = "none", max.iter=100)
biplot.psych(modelo3)
modelo3$communality#comunalidades
modelo3$uniquenesses#unicidades
modelo3$loadings
fa.diagram(modelo3)
residuals(modelo3)
modelo4 <- fa(estudiantes,rotate = "Varimax",nfactors = 2,fm="pa",max.iter=100)
biplot.psych(modelo4)
modelo4$loadings
fa.diagram(modelo4)
estudiantes$P8
estudiantes
modelo1 <- fa(estudiantes, rotate = "none", nfactors = 2, fm="minres")
modelo1$e.values # Valores propios de la matriz de correlaciones
modelo1$values # Valores propios de la solución de los factores comunes
modelo1$communality #comunalidades
modelo1
modelo1$uniquenesses
modelo1$loadings
biplot.psych(fa(estudiantes,nfactors = 2,fm="minres",rotate = "none"),pch = c(21,18))
fa.diagram(modelo1)
modelo1$residual
residuals(modelo1)
biplot.psych(fa(estudiantes,nfactors = 2,fm="minres",rotate = "varimax"),pch = c(21,18))
modelo2 <- fa(estudiantes,nfactors = 2, fm="minres",rotate = "varimax")
modelo2$communalities # comunalidades
modelo2$uniquenesses # unicidades
modelo2$loadings
fa.diagram(modelo2)
modelo3 <- fa(estudiantes,nfactors = 2, fm="pa",rotate = "noe")
# No llega a la solución, subimos el número de iteraciones
modelo3 <- fa(estudiantes,nfactors = 2, fm="pa",rotate = "none")
modelo3 <- fa(estudiantes,nfactors = 2, fm="pa",rotate = "none", max.iter=100)
biplot.psych(modelo3)
modelo3$communality#comunalidades
modelo3$uniquenesses#unicidades
modelo3$loadings
fa.diagram(modelo3)
residuals(modelo3)
modelo4 <- fa(estudiantes,rotate = "Varimax",nfactors = 2,fm="pa",max.iter=100)
biplot.psych(modelo4)
modelo4$loadings
fa.diagram(modelo4)
modelo5<-fa(estudiantes,rotate = "oblimin",nfactors = 2,fm="pa",max.iter=100)
biplot.psych(modelo5)
modelo5$loadings
fa.diagram(modelo5)
modelo5$Structure
modelo2$scores
modelo4$scores
modelo5$scores
# Ver las puntuaciones de 5 sujetos
head(modelo2$scores)
length(modelo2$scores)/5 # Sujetos totales
dim(data)[1] # Sujetos totales en df original
length(modelo2$scores)/2 # Sujetos totales
dim(data)[1] # Sujetos totales en df original
length(modelo2$scores) # Sujetos totales
dim(data)[1]
dim(data)
estudiantes<-read.csv("estudiantes.csv", header = T, sep = ";")
estudiantes<-read.csv(path, header = T, sep = ";")
str(estudiantes)
summary(estudiantes)
R <- cor(estudiantes);R
str(estudiantes)
length(modelo2$scores) # Sujetos totales
dim(estudiantes)
dim(estudiantes)[1] # Sujetos totales en df original
length(modelo2$scores)/2 # Sujetos totales entre numero de factores
############################################################################
library("factoextra")
KMO(R)
cortest.bartlett(R, n = 20)
factanal(estudiantes, factors = 2, rotation = "none")
estudiantes
head(estudiantes)
estudiantes$S
estudiantes$S <- ifelse(estudiantes$S == "h", 1,
ifelse(estudiantes$S == "m", 2, estudiantes$S))
estudiantes$S
estudiantes$S <- as.numeric(estudiantes$S)
estudiantes$S <- as.numeric(estudiantes$S)
estudiantes$S
head(estudiantes)
estudiantes$S <- ifelse(estudiantes$S == "h", 1,
ifelse(estudiantes$S == "m", 2, estudiantes$S))
estudiantes$S <- as.numeric(estudiantes$S)
estudiantes$C <- ifelse(estudiantes$C == "SI", 1,
ifelse(estudiantes$C == "NO", 0, estudiantes$C))
estudiantes$C <- as.numeric(estudiantes$C)
estudiantes$P8 <- ifelse(estudiantes$P8 == "SI", 1,
ifelse(estudiantes$P8 == "NO", 0, estudiantes$P8))
estudiantes$P8 <- as.numeric(estudiantes$P8)
head(estudiantes)
# Si no queremos utilizar las variables de texto
estudiantes <- estudiantes[, sapply(estudiantes, is.numeric)]
# Modelos
modelo1 <- fa(estudiantes, rotate = "none", nfactors = 2, fm="minres")
modelo1$e.values # Valores propios de la matriz de correlaciones
modelo1$values # Valores propios de la solución de los factores comunes
modelo1$communality # comunalidades
modelo1
modelo1$uniquenesses # unicidades, el porcentaje que queda por explicar
modelo1$loadings
biplot.psych(fa(estudiantes,nfactors = 2,fm="minres",rotate = "none"),pch = c(21,18))
fa.diagram(modelo1)
# otra forma de hacer el ejemplo
estudiantes<-read.csv(path, header = T, sep = ";")
# prepocesamiento de variables
estudiantes$S <- ifelse(estudiantes$S == "h", 1,
ifelse(estudiantes$S == "m", 2, estudiantes$S))
estudiantes$S <- as.numeric(estudiantes$S)
estudiantes$C <- ifelse(estudiantes$C == "SI", 1,
ifelse(estudiantes$C == "NO", 0, estudiantes$C))
estudiantes$C <- as.numeric(estudiantes$C)
estudiantes$P8 <- ifelse(estudiantes$P8 == "SI", 1,
ifelse(estudiantes$P8 == "NO", 0, estudiantes$P8))
estudiantes$P8 <- as.numeric(estudiantes$P8)
# Si no queremos utilizar las variables de texto
estudiantes <- estudiantes[, sapply(estudiantes, is.numeric)]
# Análsis factorial
# Instalar los paquetes necesarios
if (!require("psych")) install.packages("psych")
if (!require("GPArotation")) install.packages("GPArotation")
# Cargar los paquetes
library(psych)
library(GPArotation)
##### APARTADO 1
# Cargar los datos
path="/Users/jjmilla/Repositorios/master-umh-stat/master-umh-stat/Estadistica I/Parte 3 - Scripts docente/11_AnalisisFactorial/Ejemplos/EjemploCuestionario/cuestionario.csv"
data <- read.csv(path, sep = ";")
str(data)
# Visualizar los primeros datos
head(data)
# Número de observaciones
n <- nrow(data)
##### APARTADO 2
# Test de esfericidad de Bartlett
cortest.bartlett(cor(data[, 1:25]), n = n)
# Dado que el p-valor es extremadamente bajo:
# Las correlaciones entre las variables son estadísticamente significativas.
# Es adecuado proceder con el análisis factorial, ya que existe suficiente correlación
# entre las variables para justificarlo.
# Test de adecuación muestral (KMO)
KMO(cor(data[, 1:25]))
# La salida del test de adecuación muestral de Kaiser-Meyer-Olkin (KMO)
# evalúa si las variables de tu conjunto de datos son adecuadas para realizar un análisis factorial
# Según los criterios establecidos:
# > 0.90: Excelente.
# 0.80 - 0.89: Muy bueno.
# 0.70 - 0.79: Bueno.
# 0.60 - 0.69: Aceptable.
# < 0.60: Inadecuado.
# MSA (Measure of Sampling Adequacy) evalúa la adecuación de cada variable
# < 0.50: La variable no es adecuada y debería eliminarse.
# > 0.50: La variable es adecuada.
# Test de adecuación muestral (KMO)
KMO(cor(data[, 1:25]))
