eval_ymat = as.matrix(A[, 2]),
convexity = TRUE,
returns = "variable",
measure = "rad_out",
)
# frontera: medida radial input
A$frontier_x <- A$rad_inp$score * A$employee
# frontera: medida radial output
A$frontier_y <- A$rad_out$score * A$sale
# debemos ordenar los datos para que ggplot2 represente la frontera correctamente:
A_sorted_x <- A %>% arrange(sale, frontier_x)
A_sorted_y <- A %>% arrange(employee, frontier_y)
ggplot(A) +
geom_point(aes(x = employee, y = sale)) +
geom_text(aes(x = employee, y = sale, label = rownames(A)), hjust = 1.8, vjust = 1.3) +
geom_path(data = A_sorted_x, aes(x = frontier_x, y = sale)) +
geom_path(data = A_sorted_y, aes(x = employee, y = frontier_y)) +
geom_point(aes(x = frontier_x, y = sale, color = "Input"), size = 3, alpha = 0.3) +
geom_point(aes(x = employee, y = frontier_y, color = "Output"), size = 3, alpha = 0.3) +
annotate("text", x = 2.2, y = 1.8, label = "I'", color = "red") +
annotate("text", x = 10, y = 6.7, label = "J'", color = "red") +
expand_limits(x = 0, y = 0) +
guides(color = guide_legend(title = "Proyección")) +
theme_bw() +
theme(legend.position = c(0.90, 0.2))
rad_out <- function (
tech_xmat,
tech_ymat,
eval_xmat,
eval_ymat,
convexity,
returns
) {
# número de DMUs en la tecnología
tech_dmu <- nrow(tech_xmat)
# número de DMUs a evaluar
eval_dmu <- nrow(eval_xmat)
# número de inputs y de outputs
nX <- ncol(tech_xmat)
nY <- ncol(tech_ymat)
# inicializamos el vector de scores, de bechmarking y de slacks
scores <- matrix(nrow = eval_dmu, ncol = 1) # puntos a evaluar, tantos como dmu
slacks <- matrix(nrow = eval_dmu, ncol = nX + nY) # slacks
benchs <- matrix(nrow = eval_dmu, ncol = tech_dmu) # DMUs de referencia
for (d in 1:eval_dmu) {
# función objetivo
objVal <- matrix(ncol = 0, nrow = 1 + nX + nY + tech_dmu)
objVal[1] <- 1
# estructura para lpSolve
lps <- make.lp(nrow = 0, ncol = 1 + nX + nY + tech_dmu)
lp.control(lps, sense = "max")
set.objfn(lps, objVal)
for(xi in 1:nX) {
# slacks para inputs
x.slack <- rep(0, nX)
x.slack[xi] <- 1
x_slacks <- c(x.slack, rep(0, nY), rep(0, tech_dmu))
add.constraint(lps, xt = c(0, x.slack, tech_xmat[,xi]), "=",  rhs = eval_xmat[d,xi])
}
for(yi in 1:nY) {
# slacks para outputs
y.slack <- rep(0, nY)
y.slack[yi] <- -1
y_slacks <- c(0, rep(0, nX), y.slack)
add.constraint(lps, xt = c(-eval_ymat[d,xi], y_slacks, tech_ymat[,yi]), "=", rhs = 0)
}
if (returns == "variable") {
if (convexity) {
add.constraint(
lprec = lps, xt = c(rep(0, 1 + nX + nY), rep(1, tech_dmu)), type = "=", rhs = 1
)
} else {
add.constraint(
lprec = lps, xt = c(rep(0, 1 + nX + nY), rep(1, tech_dmu)), type = "=", rhs = 1
)
set.type(lps, columns = 1:tech_dmu + (1 + nX + nY), type = c("binary"))
}
}
solve(lps)
scores[d, ] <- get.variables(lps)[1]
# slacks
slacks[d, ] <- get.variables(lps)[2:(1 + nX + nY)]
# DMUs de referencia
benchs[d, ] <- get.variables(lps)[(2 + nX + nY):(1 + nX + nY + tech_dmu)]
}
# nombres: score, slacks, lambdas
colnames(scores) <- "rad_out"
colnames(slacks)  <- c(paste("s_x", 1:nX, sep = ""), paste("s_y", 1:nY, sep = ""))
colnames(benchs) <- paste("lmb", 1:tech_dmu, sep = "")
return(list("score" = scores, "slacks" = slacks, "bench" = benchs))
}
install.packages("bayesrules")
wam <- function (
tech_xmat,
tech_ymat,
eval_xmat,
eval_ymat,
weights,
convexity,
returns
) {
# número de DMUs en la tecnología
tech_dmu <- nrow(tech_xmat)
# número de DMUs para ser evaluados
eval_dmu <- nrow(eval_xmat)
# número de inputs y de outputs
nX <- ncol(tech_xmat)
nY <- ncol(tech_ymat)
# inicializamos el vector de scores, slacks y de bechmarking
scores <- matrix(nrow = eval_dmu, ncol = 1)
slacks <- matrix(nrow = eval_dmu, ncol = nX + nY)
benchs <- matrix(nrow = eval_dmu, ncol = tech_dmu)
for (d in 1:eval_dmu) {
# objective function
objVal <- matrix(ncol = nX + nY + tech_dmu, nrow = 1)
# Weights
if (weights == "WAM") {
# Weighted Additive Model
objVal[1:(nX + nY)] <- 1
} else if (weights == "MIP") {
# Measure of Inefficiency Proportions
objVal[1:(nX + nY)] <- 1
} else if (weights == "NOR") {
# Normalized Weighted Additive Model
objVal[1:(nX + nY)] <- c(
1 / apply(eval_xmat, 2, sd),
1 / apply(eval_ymat, 2, sd)
)
} else if (weights == "RAM") {
# Range Adjusted Measure
xranges <- apply(eval_xmat, 2, max) - apply(eval_xmat, 2, min)
yranges <- apply(eval_ymat, 2, max) - apply(eval_ymat, 2, min)
objVal[1:(nX + nY)] <- c(
1 / ((nX + nY)*xranges),
1 / ((nX + nY)*yranges)
)
} else if (weights == "BAM") {
# Bounded Adjusted Measure
p1 <- eval_dmu[d, ] - apply(eval_xmat, 2, min)
p2 <- apply(eval_ymat, 2, max) - eval_ymat[d, ]
objVal[1:(nX + nY)] <-  c(
1 / ((nX + nY)*p1),
1 / ((nX + nY)*p2)
)
} else {
stop(print(paste(weights, "no disponibles")))
}
# structure for lpSolve
lps <- make.lp(nrow = 0, ncol = nX + nY + tech_dmu)
lp.control(lps, sense = "max")
set.objfn(lps, objVal)
# inputs
for (xi in 1:nX) {
x_slack <- rep(0, nX)
x_slack[xi] <- 1
x_slack <- c(x_slack, rep(0, nY))
add.constraint(lps, xt = c(x_slack, tech_xmat[,xi]), "=", rhs = eval_xmat[d,xi])
}
# outputs
for (yi in 1:nY) {
y_slack <- rep(0, nY)
y_slack[yi] <- -1
y_slack <- c(rep(0, nX), y_slack)
add.constraint(lps, xt = c(y_slack, tech_ymat[,yi]), "=", rhs = eval_ymat[d,xi])
}
if (returns == "variable") {
if (convexity) {
add.constraint(lprec = lps, xt = c(rep(0, nX + nY), rep(1, tech_dmu)), type = "=", rhs = 1)
} else {
add.constraint(lprec = lps, xt = c(rep(0, nX + nY), rep(1, tech_dmu)), type = "=", rhs = 1)
set.type(lps, columns = 1:tech_dmu + (nX + nY), type = c("binary"))
}
}
solve(lps)
scores[d, ] <- get.objective(lps)
# slacks
slacks[d, ] <- get.variables(lps)[1:(nX + nY)]
# DMUs de referencia
benchs[d, ] <- get.variables(lps)[(nX + nY + 1):(nX + nY + tech_dmu)] # resto de la matrix
}
# nombres: score, slacks, lambdas
colnames(scores) <- weights
colnames(slacks)  <- c(paste("s_x", 1:nX, sep = ""), paste("s_y", 1:nY, sep = ""))
colnames(benchs) <- paste("lmb", 1:tech_dmu, sep = "")
return(list("score" = scores, "slacks" = slacks, "bench" = benchs))
}
eff_scores <- function (
tech_xmat,
tech_ymat,
eval_xmat,
eval_ymat,
convexity = TRUE,
returns = "variable",
measure = "rad_out",
direction = NULL,
weights = NULL,
rownames = NULL
) {
if (measure == "rad_out") {
# radial output
model <- rad_out (
tech_xmat = tech_xmat,
tech_ymat = tech_ymat,
eval_xmat = eval_xmat,
eval_ymat = eval_ymat,
convexity = convexity,
returns = returns
)
} else if (measure == "rad_inp") {
# radial input
model <- rad_inp (
tech_xmat = tech_xmat,
tech_ymat = tech_ymat,
eval_xmat = eval_xmat,
eval_ymat = eval_ymat,
convexity = convexity,
returns = returns
)
} else if (measure == "ddf") {
# distancia direccional
model <- ddf (
tech_xmat = tech_xmat,
tech_ymat = tech_ymat,
eval_xmat = eval_xmat,
eval_ymat = eval_ymat,
convexity = convexity,
returns = returns,
direction = direction
)
} else if (measure == "wam") {
# weighted additive model
model <- wam (
tech_xmat = tech_xmat,
tech_ymat = tech_ymat,
eval_xmat = eval_xmat,
eval_ymat = eval_ymat,
convexity = convexity,
returns = returns,
weights = weights
)
} else {
stop(print(paste(measure, "no disponible")))
}
if (!is.null(rownames)) {
row.names(model$score) <- rownames
}
return(model)
}
internet <- read_excel("/Users/jjmilla/Repositorios/master-umh-stat/master-umh-stat/Eficiencia/internet firms.xlsx")
companies <- internet$company
internet <- as.data.frame(internet[, 2:7])
names(internet) <- c(
"visitors", "employee", "marketing", "developm", # inputs
"customers", "revenue" # outputs
)
rownames(internet) <- companies
# matriz de inputs
X_mat <- as.matrix(internet[, 1:4])
# matriz de outputs
Y_mat <- as.matrix(internet[, 5:6])
# creamos una lista donde cada elemento es el data.frame devuelto por un modelo aditivo:
additive_models <- list (
"WAM" = eff_scores(
X_mat, Y_mat, X_mat, Y_mat, weights = "WAM", measure = "wam", rownames = companies),
"MIP" = eff_scores(
X_mat, Y_mat, X_mat, Y_mat, weights = "MIP", measure = "wam", rownames = companies),
"NOR" = eff_scores(
X_mat, Y_mat, X_mat, Y_mat, weights = "NOR", measure = "wam", rownames = companies),
"RAM" = eff_scores(
X_mat, Y_mat, X_mat, Y_mat, weights = "RAM", measure = "wam", rownames = companies),
"BAM" = eff_scores(
X_mat, Y_mat, X_mat, Y_mat, weights = "BAM", measure = "wam", rownames = companies)
)
# cargamos librerías adicionales para la realización de la práctica
library(dplyr)
library(ggplot2)
library(readxl)
library(lpSolveAPI)
library(knitr)
internet <- read_excel("/Users/jjmilla/Repositorios/master-umh-stat/master-umh-stat/Eficiencia/internet firms.xlsx")
companies <- internet$company
internet <- as.data.frame(internet[, 2:7])
names(internet) <- c(
"visitors", "employee", "marketing", "developm", # inputs
"customers", "revenue" # outputs
)
rownames(internet) <- companies
wam <- function (
tech_xmat,
tech_ymat,
eval_xmat,
eval_ymat,
weights,
convexity,
returns
) {
# número de DMUs en la tecnología
tech_dmu <- nrow(tech_xmat)
# número de DMUs para ser evaluados
eval_dmu <- nrow(eval_xmat)
# número de inputs y de outputs
nX <- ncol(tech_xmat)
nY <- ncol(tech_ymat)
# inicializamos el vector de scores, slacks y de bechmarking
scores <- matrix(nrow = eval_dmu, ncol = 1)
slacks <- matrix(nrow = eval_dmu, ncol = nX + nY)
benchs <- matrix(nrow = eval_dmu, ncol = tech_dmu)
for (d in 1:eval_dmu) {
# objective function
objVal <- matrix(ncol = nX + nY + tech_dmu, nrow = 1)
# Weights
if (weights == "WAM") {
# Weighted Additive Model
objVal[1:(nX+nY)] <- 1
} else if (weights == "MIP") {
# Measure of Inefficiency Proportions
objVal[1:(nX+nY)] <- c(1/eval_xmat[d,],
1/eval_ymat[d,])
} else if (weights == "NOR") {
# Normalized Weighted Additive Model
objVal[1:(nX+nY)] <- c(1 / apply(eval_xmat, 2, sd),
1 / apply(eval_ymat, 2, sd))
} else if (weights == "RAM") {
# Range Adjusted Measure
xranges <- apply(eval_xmat, 2, max) - apply(eval_xmat, 2, min)
yranges <- apply(eval_ymat, 2, max) - apply(eval_ymat, 2, min)
objVal[1:(nX+nY)] <- c(1/((nX+nY)*xranges),
1/((nX+nY)*yranges))
} else if (weights == "BAM") {
# Bounded Adjusted Measure
p1 <- eval_xmat[d,] - apply(eval_xmat, 2, min)
p2 <- apply(eval_ymat, 2, max) - eval_ymat[d,]
objVal[1:(nX+nY)] <- c(1/((nX+nY)*p1),
1/((nX+nY)*p2))
} else {
stop(print(paste(weights, "no disponibles")))
}
# structure for lpSolve
lps <- make.lp(nrow = 0, ncol = nX + nY + tech_dmu)
lp.control(lps, sense = "max")
set.objfn(lps, objVal)
# inputs
for (xi in 1:nX) {
x_slack <- rep(0,nX)
x_slack[xi] <- 1
x_slack <- c(x_slack,rep(0,nY))
add.constraint(lps, xt = c(x_slack, tech_xmat[,xi]), "=", rhs = eval_xmat[d,xi])
}
# outputs
for (yi in 1:nY) {
y_slack <- rep(0,nY)
y_slack[yi] <- -1
y_slack <- c(rep(0,nX), y_slack)
add.constraint(lps, xt = c(y_slack, tech_ymat[,yi]), "=", rhs = eval_ymat[d,yi])
}
if (returns == "variable") {
if (convexity) {
add.constraint(lprec = lps, xt = c(rep(0, nX + nY), rep(1, tech_dmu)), type = "=", rhs = 1)
} else {
add.constraint(lprec = lps, xt = c(rep(0, nX + nY), rep(1, tech_dmu)), type = "=", rhs = 1)
set.type(lps, columns = 1:tech_dmu + (nX + nY), type = c("binary"))
}
}
solve(lps)
scores[d, ] <- get.objective(lps)
# slacks
slacks[d, ] <- get.variables(lps)[1:(nX+nY)]
# DMUs de referencia
benchs[d, ] <- get.variables(lps)[(1+nX+nY):(nX+nY+tech_dmu)]
}
# nombres: score, slacks, lambdas
colnames(scores) <- weights
colnames(slacks)  <- c(paste("s_x", 1:nX, sep = ""), paste("s_y", 1:nY, sep = ""))
colnames(benchs) <- paste("lmb", 1:tech_dmu, sep = "")
return(list("score" = scores, "slacks" = slacks, "bench" = benchs))
}
eff_scores <- function (
tech_xmat,
tech_ymat,
eval_xmat,
eval_ymat,
convexity = TRUE,
returns = "variable",
measure = "rad_out",
direction = NULL,
weights = NULL,
rownames = NULL
) {
if (measure == "rad_out") {
# radial output
model <- rad_out (
tech_xmat = tech_xmat,
tech_ymat = tech_ymat,
eval_xmat = eval_xmat,
eval_ymat = eval_ymat,
convexity = convexity,
returns = returns
)
} else if (measure == "rad_inp") {
# radial input
model <- rad_inp (
tech_xmat = tech_xmat,
tech_ymat = tech_ymat,
eval_xmat = eval_xmat,
eval_ymat = eval_ymat,
convexity = convexity,
returns = returns
)
} else if (measure == "ddf") {
# distancia direccional
model <- ddf (
tech_xmat = tech_xmat,
tech_ymat = tech_ymat,
eval_xmat = eval_xmat,
eval_ymat = eval_ymat,
convexity = convexity,
returns = returns,
direction = direction
)
} else if (measure == "wam") {
# weighted additive model
model <- wam (
tech_xmat = tech_xmat,
tech_ymat = tech_ymat,
eval_xmat = eval_xmat,
eval_ymat = eval_ymat,
convexity = convexity,
returns = returns,
weights = weights
)
} else {
stop(print(paste(measure, "no disponible")))
}
if (!is.null(rownames)) {
row.names(model$score) <- rownames
}
return(model)
}
# matriz de inputs
X_mat <- as.matrix(internet[, 1:4])
# matriz de outputs
Y_mat <- as.matrix(internet[, 5:6])
# creamos una lista donde cada elemento es el data.frame devuelto por un modelo aditivo:
additive_models <- list (
"WAM" = eff_scores(X_mat, Y_mat, X_mat, Y_mat,
measure = "wam",
weights = "WAM",
rownames = companies),
"MIP" = eff_scores(X_mat, Y_mat, X_mat, Y_mat,
measure = "wam",
weights = "MIP",
rownames = companies),
"NOR" = eff_scores(X_mat, Y_mat, X_mat, Y_mat,
measure = "wam",
weights = "NOR",
rownames = companies),
"RAM" = eff_scores(X_mat, Y_mat, X_mat, Y_mat,
measure = "wam",
weights = "RAM",
rownames = companies),
"BAM" = eff_scores(X_mat, Y_mat, X_mat, Y_mat,
measure = "wam",
weights = "BAM",
rownames = companies)
)
# creamos un data.frame para almacenar los scores de eficiencia de los 5 modelos:
add_scores <- data.frame(
"Companies" = companies,
"WAM" = rep(NA, nrow(internet)),
"MIP" = rep(NA, nrow(internet)),
"NOR" = rep(NA, nrow(internet)),
"RAM" = rep(NA, nrow(internet)),
"BAM" = rep(NA, nrow(internet))
)
# añadimos los scores de eficiencia en su columna correspondiente:
for (i in 1:length(additive_models)) {
add_scores[, i + 1] <- round(additive_models[[i]][[1]][, 1], 2)
}
# obtenemos la tabla de resultados para: eBay, Beyond.com, Drugstore.com
kableExtra::kbl(add_scores[c(4, 9, 13), ], booktabs = T)
# reorganizamos los datos para que el modelo sea una variable del data.frame (excluimos BAM)
add_scores_melted <- reshape2::melt(add_scores[, - 6], id = "Companies")
names(add_scores_melted) <- c("companies", "model", "score")
ggplot(add_scores_melted, aes(x = model, y = score, fill = model)) +
geom_boxplot() +
geom_jitter(color = "black", alpha = 0.5) +
facet_wrap(~ model, scales = "free_y") +
theme_bw() +
theme(legend.position = "None") +
xlab("Additive Model") +
ylab("Score")
# matriz de inputs
X_mat <- as.matrix(internet[, 1:4])
# matriz de outputs
Y_mat <- as.matrix(internet[, 5:6])
# scores de eficiencia mediante MIP
mip <- ...
# matriz de inputs
X_mat <- as.matrix(internet[, 1:4])
# matriz de outputs
Y_mat <- as.matrix(internet[, 5:6])
# scores de eficiencia mediante MIP
mip <- eff_scores(X_mat, Y_mat, X_mat, Y_mat,
measure = "wam",
weights = "MIP",
rownames = companies)
# scores
mip$score[c(2, 6, 10, 18), "MIP"]
# slacks
round(mip$slack[c(2, 6, 10, 18), ], 2)
# benchmarking
round(mip$bench[c(2, 6, 10, 18), c(2, 4, 5, 6, 7, 11, 12, 14, 15, 19, 20, 21, 22)], 2)
